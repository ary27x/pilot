PILOT CFG

<SOURCE> -> <STATEMENT>*
<STATEMENT> -> <ID> is <VALUE> | get <INPUT> | display <EXPRESSION> <DISPLAY_RECURSIVE> |if <CONDITION> : <STATEMENT>* <AFTER_IF> | ...
... RANGE <STRICT_VALUE> TO <STRICT_VALUE> <RANGE_SUPPLEMENT> : <STATEMENT>* | ID ARE <STRICT_VALUE>* | RETURN INT | ...
... FUNCTION ID <ARGUMENT_WRAPPER> : STATEMENT* | CALL ID <CALL_ID_WRAPPER>
<ARGUMENT_WRAPPER> -> _EPSILON_ | :: ID <ID_RECURSIVE>
<ID_RECURSIVE> -> _EPSILON_ | , ID <ID_RECURSIVE>
<CALL_ID_WRAPPER> -> _EPSILON_ | :: ID <CALL_ID_RECURSIVE>
<CALL_ID_RECURSIVE> -> _EPSILON_ | , ID <CALL_ID_RECURSIVE> | , INT <CALL_ID_RECURSIVE>
<RANGE_SUPPLEMENT> -> AS ID | _EPSILON_
<DISPLAY_SUBFUNC> -> .red | .green | .yellow | .cyan | .purple | .blue | .white | _EPSILON_
<DISPLAY_RECURSIVE> -> , <EXPRESSION> <DISPLAY_RECURSIVE> | _EPSILON_
<CONDITION> -> <CONDITIONAL_VALUE> <OPERATOR> <CONDITIONAL_VALUE>
<OPERATOR> -> == | != | < | <= | > | >=
<AFTER_IF> -> ELSE <STATEMENT>* | _EPSILON_
<INPUT> -> <INPUT_PRECEDE> ID
<INPUT_PRECEDE> -> ID , <INPUT_PRECEDE> | _EPSILON_   
<VALUE> -> ID | INT | <MATH> | " STRING " | - INT
<ID> -> ID | ID[INT]
<CONDITIONAL_VALUE> -> ID | INT | <MATH> | - INT
<STRICT_VALUE> -> ID | INT | - INT
<MATH> -> <STRICT_VALUE> <MATH_OPERATOR> <STRICT_VALUE> <MATH_RECURSIVE>*  
<MATH_RECURSIVE> -> <MATH_OPERATOR> <STRICT_VALUE> <MATH_RECURSIVE> | _EPSILON_
<MATH_OPERATOR> -> + | - | * | / | %
<EXPRESSION> -> ID | INT | MATH | " STRING " | " STRING " * <VALUE>

